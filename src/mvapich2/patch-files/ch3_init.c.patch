diff --git a/src/mpid/ch3/channels/mrail/src/rdma/ch3_init.c b/src/mpid/ch3/channels/mrail/src/rdma/ch3_init.c
index 941aba1..ea2ad2b 100644
--- a/src/mpid/ch3/channels/mrail/src/rdma/ch3_init.c
+++ b/src/mpid/ch3/channels/mrail/src/rdma/ch3_init.c
@@ -28,6 +28,8 @@ int (*check_cq_overflow) (MPIDI_VC_t *c, int rail);
 int (*perform_blocking_progress) (int hca_num, int num_cqs);
 void (*handle_multiple_cqs) (int num_cqs, int cq_choice, int is_send_completion);
 
+int mv2_user_defined_mapping = FALSE;
+
 #undef FUNCNAME
 #define FUNCNAME MPIDI_CH3I_set_affinity
 #undef FCNAME
@@ -59,6 +61,7 @@ int MPIDI_CH3I_set_affinity(MPIDI_PG_t * pg, int pg_rank)
             (char *) MPIU_Malloc(sizeof(char) * (s_cpu_mapping_line_max + 1));
         strncpy(s_cpu_mapping, value, s_cpu_mapping_line_max);
         s_cpu_mapping[s_cpu_mapping_line_max] = '\0';
+        mv2_user_defined_mapping = TRUE;
     }
 
     if (mv2_enable_affinity && (value = getenv("MV2_CPU_MAPPING")) == NULL) {
@@ -74,6 +77,7 @@ int MPIDI_CH3I_set_affinity(MPIDI_PG_t * pg, int pg_rank)
                                           "**fail", "**fail %s",
                                           "CPU_BINDING_PRIMITIVE: Policy should be bunch or scatter.");
             }
+            mv2_user_defined_mapping = TRUE;
         } else {
             /* User has not specified a binding policy.
              * We are going to do "bunch" binding, by default  */
@@ -96,6 +100,7 @@ int MPIDI_CH3I_set_affinity(MPIDI_PG_t * pg, int pg_rank)
                                           "**fail", "**fail %s",
                                           "CPU_BINDING_PRIMITIVE: Level should be core, socket, or numanode.");
             }
+            mv2_user_defined_mapping = TRUE;
         } else {
             /* User has not specified a binding level.
              * We are going to do "core" binding, by default  */

